@page "/admin/usermanager"
@using AutoMapper;
@using MediatR;
@using Mgr.Core.Entities;
@using Mgr.Core.EnumType;
@using Mgr.Core.Models;
@using UnitMgr.Admin.Components.Dialogs;
@using UnitMgr.Application.Services;
@inject IJSRuntime JS
@attribute [Authorize(Policy = Permissions.Users.Edit)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<UserDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 265px)"
                  Loading="@_loading"
                  @bind-RowsPerPage="_defaultPageSize"
                  SortLabel="@ConstantString.ORDERBY"
                  MultiSelection="true"
                  @bind-SelectedItems="_selectedItems"
                  Hover="true" 
                  @ref="_table">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">UserDtos</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@ConstantString.REFRESH</MudButton>
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Disabled="@_loading"
                                   Size="Size.Small"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@ConstantString.CREATE</MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(_selectedItems.Count>0))"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@ConstantString.DELETE</MudButton>
                        }

                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Material.Filled.KeyboardCommandKey" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" 
                        Label="" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@_loading" OnClick="@(()=>OnRefresh())">@ConstantString.REFRESH</MudMenuItem>
                            @if (_canCreate)
                            {
                                <MudMenuItem Disabled="@_loading" OnClick="OnCreate">@ConstantString.CREATE</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@ConstantString.DELETE</MudMenuItem>
                            }

                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@_searchString" Placeholder="@ConstantString.SEARCH" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <col style="width:60px;" />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh Style="width:150px">@ConstantString.ACTIONS</MudTh>
                <MudTh Style="width:350px">
                    <MudTableSortLabel SortLabel="UserName" T="UserDto">Tên tài khoản</MudTableSortLabel>
                 </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="DisplayName" T="UserDto">Họ và tên</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="Email" T="UserDto">Email</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="PhoneNumber" T="UserDto">Điện thoại</MudTableSortLabel>
                </MudTh>
                <MudTh Style="width:350px">
                    Vai trò
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ConstantString.ACTIONS">
                    @if (_canEdit || _canDelete)
                    {
                        <MudMenu Label="@ConstantString.ACTIONS" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             FullWidth = "true"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@ConstantString.EDIT</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="@(()=>OnDelete(context))">@ConstantString.DELETE</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @ConstantString.NOALLOWED
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="Tên tài khoản">
                    <MudText>@context.UserName</MudText>
                </MudTd>
                <MudTd DataLabel="Họ tên">
                    <MudText>@context.DisplayName</MudText>
                </MudTd>
                <MudTd DataLabel="Email">
                    <MudText>@context.Email</MudText>
                </MudTd>
                <MudTd DataLabel="Điện thoại">
                    <MudText>@context.PhoneNumber</MudText>
                </MudTd>
                <MudTd DataLabel="Vai trò">
                    <MudText>@string.Join("; ",@context.AssignedRoles)</MudText>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@ConstantString.NOMACHING</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.LOADING</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="@AppSettingConstants.PageSizeOptions" 
                               RowsPerPageString="Số dòng/Trang" 
                               InfoFormat="@($"{infoFormat}")" />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    private string infoFormat = "{first_item}-{last_item}/{all_items}";
    public string? Title { get; private set; }
    private int _defaultPageSize =  AppSettingConstants.DefaultPageSize;
    private HashSet<UserDto> _selectedItems = new HashSet<UserDto>();
    private MudTable<UserDto> _table = default!;
    private string _searchString = string.Empty;
    private bool _loading;
    [Inject]
    private IUserService _UserService { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;

    private PaginationRequest _request { get; set; } = new();

    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;

    protected override async Task OnInitializedAsync()
    {
        Title = "Tài khoản";
        var state = await _authState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Delete)).Succeeded;
    }
    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        try
        {
            _loading = true;
            _request = new PaginationRequest();
            _request.SearchValue = _searchString;
            var sortOrderType = SortOrders.desc;
            if (state.SortDirection == SortDirection.Ascending)
                sortOrderType = SortOrders.asc;
            _request.AddSort(string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel, sortOrderType);
            _request.PageIndex = state.Page + 1;
            _request.PageSize = state.PageSize;
            var result = await _UserService.GetDataCustom(_request);
            return new TableData<UserDto>() { TotalItems = result.TotalRecord, Items = result.Data};
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        _searchString = text;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        _selectedItems = new();
        _searchString = string.Empty;
        await _table.ReloadServerData();
    }
    private async Task OnCreate()
    {
        var model = new UserDto();
        var parameters = new DialogParameters
            {
        { nameof(UserManagerForm.model),model },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<UserManagerForm>
                     ("Tạo mới", 
                     parameters, 
                     options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {            
            var result = await _UserService.CreateAccount((UserDto)state.Data);
            if(result.Success)
            {
                await _table.ReloadServerData();
                Snackbar.Add($"{ConstantString.CREATESUCCESS}", MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add($"{result.Message}", MudBlazor.Severity.Error);
            }
        }
    }
    private async Task OnEdit(UserDto model)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UserManagerForm.model), model);
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<UserManagerForm>
                    ("Cập nhật", 
                    parameters, 
                    options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            var result = await _UserService.UpdateAccount((UserDto)state.Data);
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.UPDATESUCCESS}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDelete(UserDto model)
    {
        var deleteContent = ConstantString.DELETECONFIRMATIONWITHNAME;
        var parameters = new DialogParameters
                    {
                { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, model.DisplayName) }
                    };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>
        (string.Format(ConstantString.EDITTHEITEM, "UserDto"), parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            var result = await _UserService.DeleteAsync(model.Id);
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.DELETESUCCESS}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDeleteChecked()
    {
        var deleteContent = ConstantString.DELETECONFIRMATION;
        var parameters = new DialogParameters
                        {
                    { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent,_selectedItems.Count) }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>
        (string.Format(ConstantString.EDITTHEITEM, "UserDto"), parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            var listIds = _selectedItems.Select(x => x.Id).ToList();
            var result = await _UserService.DeleteManyAsync(listIds);
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.DELETESUCCESS}", MudBlazor.Severity.Info);
            _selectedItems = new HashSet<UserDto>
            ();
        }
    }
}
