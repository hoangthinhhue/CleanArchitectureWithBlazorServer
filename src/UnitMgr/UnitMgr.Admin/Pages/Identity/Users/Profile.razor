@page "/user/profile"
@using MediatR;
@using Mgr.Core.EnumType;
@using Mgr.Core.Models;
@using Microsoft.AspNetCore.Identity;
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing
@using BlazorState
@using UnitMgr.Application.Features.Identity.Profile;
@using UnitMgr.Application.Features;
@using UnitMgr.Application.Services.Identity;
@using MudExtensions
@inherits OwningComponentBase
@implements IBlazorStateComponent
<PageTitle>@Title</PageTitle>
<ErrorBoundary>
    <ChildContent>
        <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" Elevation="6"
                 ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
            <MudTabPanel Text="Profile">
                <MudForm Model="@model" @ref="@_form" Validation="@(_userValidator.ValidateValue)" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.Center" Style="max-width:600px;display:flex;">
                        <MudItem sm="12" xs="12">
                            <div class="d-flex justify-center">

                                @if (string.IsNullOrEmpty(model.ProfilePictureDataUrl))
                                {
                                    <MudElement Class="d-flex flex-column  align-center">
                                        <MudAvatar Style="height:128px; width:128px; font-size:2rem;">@model.UserName.ToUpper().First()</MudAvatar>
                                        <div class="d-flex">
                                            <MudChip Size="MudBlazor.Size.Small">@model.Role</MudChip>

                                        </div>

                                    </MudElement>
                                }
                                else
                                {
                                    <MudElement Class="d-flex flex-column  align-center">
                                        <MudAvatar Image="@model.ProfilePictureDataUrl" Style="height:128px; width:128px; font-size:2rem;" />
                                        <div class="d-flex">
                                            <MudChip Size="MudBlazor.Size.Small">@model.Role</MudChip>
                                        </div>
                                    </MudElement>
                                }
                                <MudTooltip Text="Click upload a photo.">
                                    <InputFile id="UploadPhoto" OnChange="UploadPhoto" hidden accept=".jpg, .jpeg, .png" />
                                    <MudIconButton HtmlTag="label"
                                                   Color="MudBlazor.Color.Info"
                                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                                   for="UploadPhoto"></MudIconButton>
                                </MudTooltip>
                            </div>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.TenantName)" @bind-Value="model.TenantName" Label="Tenant Name" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.caption">Status</MudText>
                            <div class="d-fex">
                                <MudCheckBox For="@(() =>model.IsActive)" T="bool" @bind-Checked="model.IsActive" Label="Is Active" ReadOnly="true"></MudCheckBox>
                            </div>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.UserName)" @bind-Value="model.UserName" Label="User Name" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.Email)" @bind-Value="model.Email" Label="Email" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.DisplayName)" @bind-Value="model.DisplayName" Label="Display Name" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.PhoneNumber)" @bind-Value="model.PhoneNumber" Label="Phone Number" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Disabled="@submitting" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">
                                @if (submitting)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">@ConstantString.WATING </MudText>
                                }
                                else
                                {
                                    <MudText>@ConstantString.SAVE</MudText>
                                }
                                </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudTabPanel>
            <MudTabPanel Text="Change Password">
                <MudForm Model="@_changepassword" @ref="@_passwordform" Validation="@(_passwordValidator.ValidateValue)" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.Center" Style="max-width:300px">
                        <MudItem sm="12" xs="12">
                            <MudPasswordField Immediate="true"
                                          Label="Current Password"
                                          For="@(()=>_changepassword.CurrentPassword)"
                            @bind-Value="_changepassword.CurrentPassword"
                                          Variant="Variant.Text"
                                          PasswordMode="true"
                                          Required="true"
                                          RequiredError="current password is required!"
                                           />
                        </MudItem>
                        <MudItem xs="12">
                            <MudPasswordField Immediate="true"
                                          Label="New Password"
                                          For="@(()=>_changepassword.NewPassword)"
                            @bind-Value="_changepassword.NewPassword"
                                          Variant="Variant.Text"
                                              PasswordMode="true"
                                          Required="true"
                                          RequiredError="password is required!"
                                           />
                        </MudItem>
                        <MudItem xs="12">
                            <MudPasswordField Immediate="true"
                                          Label="Confirm New Password"
                                          For="@(()=>_changepassword.ConfirmPassword)"
                            @bind-Value="_changepassword.ConfirmPassword"
                                          Variant="Variant.Text"
                                              PasswordMode="true"
                                          Required="true"
                                          RequiredError="password is required!"
                                           />
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-auto" OnClick="@(async () => await ChangePassword())">
                                @if (submitting)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">@ConstantString.WATING </MudText>
                                }
                                else
                                {
                                    <MudText>Change Password</MudText>
                                }
                                </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudTabPanel>

        </MudTabs>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    private MudForm? _form = default!;
    private MudForm? _passwordform = default!;
    public string Title { get; set; } = "Profile";

    private bool submitting;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;
    [Inject] private IUploadService _uploadService { get; set; } = default!;
    UserProfileState UserProfileState => Store.GetState<UserProfileState>();
    private UserProfile model => UserProfileState.UserProfile;
    private UserProfileEditValidator _userValidator = new();
    private UserManager<ApplicationUser> _userManager { get; set; } = default!;
    [Inject]
    private IIdentityService _identityService { get; set; } = default!;
    public string Id  => Guid.NewGuid().ToString();
    [Inject] public IMediator Mediator { get; set; } = null!;
    [Inject] public IStore Store { get; set; } = null!;
    public void ReRender() => StateHasChanged();

    private ChangePasswordModel _changepassword { get; set; } = new();
    private ChangePasswordModelValidator _passwordValidator = new ();

    protected override Task OnInitializedAsync()
    {
        _userManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        return base.OnInitializedAsync();
    }
    private async Task UploadPhoto(InputFileChangeEventArgs e)
    {
        var filestream = e.File.OpenReadStream();
        var imgstream = new MemoryStream();
        await filestream.CopyToAsync(imgstream);
        imgstream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = Image.Load(imgstream, out IImageFormat format))
            {
                image.Mutate(
                   i => i.Resize(new ResizeOptions() { Mode = SixLabors.ImageSharp.Processing.ResizeMode.Crop, Size = new SixLabors.ImageSharp.Size(128, 128) }));
                image.Save(outStream, format);
                var filename = e.File.Name;
                var fi = new FileInfo(filename);
                var ext = fi.Extension;
                var result = await _uploadService.UploadAsync(new UploadRequest(Guid.NewGuid().ToString() + ext, UploadType.ProfilePicture, outStream.ToArray()));
                model.ProfilePictureDataUrl = result;
                var user = await _userManager.FindByIdAsync(model.UserId!);
                user!.ProfilePictureDataUrl = model.ProfilePictureDataUrl;
                await _userManager.UpdateAsync(user);
                Snackbar.Add("The avatar has been updated.", MudBlazor.Severity.Info);
                await Mediator.Send(new UserProfileState.UpdateUserProfileAction(model));
            }
        }
    }
    private async Task Submit()
    {
        submitting=true;
        try {
            await _form!.Validate();
            if (_form.IsValid)
            {
                var state = await _authState;
                var user = await _userManager.FindByIdAsync(model.UserId!);
                user!.PhoneNumber = model.PhoneNumber;
                user.DisplayName = model.DisplayName;
                user.ProfilePictureDataUrl = model.ProfilePictureDataUrl;
                await _userManager.UpdateAsync(user);
                Snackbar.Add($"{ConstantString.UPDATESUCCESS}", MudBlazor.Severity.Info);
                await Mediator.Send(new UserProfileState.UpdateUserProfileAction(model));
            }
        }
        finally
        {
            submitting = false;
        }

    }
    private async Task ChangePassword()
    { 
        submitting=true;
        try
        {
            await _passwordform!.Validate();
            if (_passwordform!.IsValid)
            {
                var user = await _userManager.FindByIdAsync(model.UserId!);
                var result = await _userManager.ChangePasswordAsync(user!, _changepassword.CurrentPassword, _changepassword.NewPassword);
                if (result.Succeeded)
                {
                    Snackbar.Add($"Changed password successfully.", MudBlazor.Severity.Info);
                }
                else
                {
                    Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description).ToArray())}", MudBlazor.Severity.Error);
                }
            }
        }
        finally
        {
            submitting = false;
        }

    }

}
