
@using Mgr.Core.Entities;
@using Mgr.Core.EnumType;
@using Mgr.Core.Models;
@using Microsoft.AspNetCore.Identity
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing
@using UnitMgr.Application.Features;
@using UnitMgr.Application.Services;
@using UnitMgr.Domain.AggregatesModel.IdentityDTOs;

@inherits MudComponentBase


<MudForm Model="@model" @ref="@form" Validation="@(modelValidator.ValidateValue)">
    <input For="@(() => model.Id)" @bind-value="model.Id" type="hidden" />
    <input For="@(() => model.ProfilePictureDataUrl)" @bind-value="model.ProfilePictureDataUrl" type="hidden" />
    <InputFile id="UploadPhoto" OnChange="UploadPhoto" hidden accept=".jpg, .jpeg, .png" />
    <MudGrid>
        <MudItem sm="12">
            <div class="d-flex justify-center">

                @if (string.IsNullOrEmpty(model.ProfilePictureDataUrl))
                {
                    <MudAvatar Style="height:128px; width:128px; font-size:2rem;">@model.UserName.ToUpper().FirstOrDefault()</MudAvatar>
                }
                else
                {
                    <MudAvatar Image="@model.ProfilePictureDataUrl" Style="height:128px; width:128px; font-size:2rem;" />
                }
                <MudTooltip Text="Click upload a photo.">
                    <MudIconButton HtmlTag="label"
                                   Color="MudBlazor.Color.Info"
                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                   for="UploadPhoto"></MudIconButton>
                </MudTooltip>
            </div>
        </MudItem>
        <MudItem sm="6" xs="12">
            <MudSelect For="@(() => model.TenantId)"
                       T="Guid?"
                       Label="Select Tenant"
                       Text="@model.TenantName"
                       Required="true"
                       RequiredError="Tenant is required."
                       @bind-Value="@model.TenantId">
                @foreach (var item in _tenants)
                {
                    <MudSelectItem T="string" Value="@item.Id.ToString()">@item.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField For="@(() => model.Provider)" @bind-Value="model.Provider" Label="Provider" Variant="Variant.Text"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField For="@(() => model.UserName)" @bind-Value="model.UserName" Label="User Name" Variant="Variant.Text"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField For="@(() => model.Email)" @bind-Value="model.Email" Label="E-mail" Variant="Variant.Text"></MudTextField>
        </MudItem>
        @if (model.Id == Guid.Empty)
        {
            <MudItem xs="12" sm="6">
                <MudPasswordField Immediate="true"
                              Label="Password"
                              @bind-Value="model.Password"
                              For="@(() => model.Password)"
                              Variant="Variant.Text"
                              PasswordMode="true"
                              Required="true"
                              RequiredError="password is required!"
                              Class="mt-4" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudPasswordField Immediate="true"
                              Label="Confirm Password"
                              @bind-Value="model.ConfirmPassword"
                              For="@(() => model.ConfirmPassword)"
                              Variant="Variant.Text"
                              PasswordMode="true"
                              Required="true"
                              RequiredError="confrm password is required!"
                              Class="mt-4" />
            </MudItem>
        }
        <MudItem xs="12" sm="6">
            <MudTextField For="@(() => model.DisplayName)" @bind-Value="model.DisplayName" Label="Display Name" Variant="Variant.Text"></MudTextField>
        </MudItem>
       
        <MudItem xs="12" sm="6">
            <MudTextField For="@(() => model.PhoneNumber)" @bind-Value="model.PhoneNumber" Label="Phone Number" Variant="Variant.Text"></MudTextField>
        </MudItem>


        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.caption">Status"]</MudText>
            <div class="d-fex">
                <MudCheckBox For="@(() =>model.IsActive)" T="bool" @bind-Checked="model.IsActive" Label="Is Active"></MudCheckBox>
            </div>
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudText Typo="Typo.caption">Assign Roles"]</MudText>
            <MudGrid Class="mt-1">
                @for (int i = 0; i < _roles.Count; i++)
                {
                    var x = i;
                    <MudItem xs="6" sm="6" Class="py-0 my=0">
                        <MudCheckBox For="@(() =>model.Checked)" T="bool" Checked="@_roles[x].value" Label="@_roles[x].key" CheckedChanged="@(s=>_roles[x].value=s)"></MudCheckBox>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>



    </MudGrid>
</MudForm>

@code {
    public class CheckItem
    {
        public string key { get; set; } = string.Empty;
        public bool value { get; set; }
    }
    MudForm? form = default!;
    private List<CheckItem> _roles { get; set; } = new();
    private List<Tenant> _tenants { get; set; } = new();
    [Inject] private IUploadService _uploadService { get; set; } = default!;
    [Inject] private ITenantService _tenantsService { get; set; } = default!;
    [Inject] private RoleManager<ApplicationRole> _roleManager { get; set; } = default!;
    UserDtoValidator modelValidator = new();
    [EditorRequired][Parameter] public UserDto model { get; set; } = default!;
    [EditorRequired][Parameter] public EventCallback<UserDto> OnFormSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var array = await _roleManager.Roles.Select(x => x.Name).ToListAsync();
        foreach (var role in array)
        {
            if (model.AssignedRoles != null && model.AssignedRoles.Contains(role))
            {
                _roles.Add(new() { key = role!, value = true });
            }
            else
            {
                _roles.Add(new() { key = role!, value = false });
            }
        }
        _tenants = (await _tenantsService.AllAsync(new Mgr.Core.Models.InputModel())).Data;

    }

    private async Task UploadPhoto(InputFileChangeEventArgs e)
    {
        var filestream = e.File.OpenReadStream();
        var imgstream = new MemoryStream();
        await filestream.CopyToAsync(imgstream);
        imgstream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = Image.Load(imgstream, out IImageFormat format))
            {
                image.Mutate(
                   i => i.Resize(new ResizeOptions() { Mode = SixLabors.ImageSharp.Processing.ResizeMode.Crop, Size = new SixLabors.ImageSharp.Size(128, 128) }));
                image.Save(outStream, format);
                var filename = e.File.Name;
                var fi = new FileInfo(filename);
                var ext = fi.Extension;
                var result = await _uploadService.UploadAsync(new UploadRequest(Guid.NewGuid().ToString() + ext, UploadType.ProfilePicture, outStream.ToArray()));
                model.ProfilePictureDataUrl = result;
                //Do your validations here
                Snackbar.Add(ConstantString.UPLOADSUCCESS, MudBlazor.Severity.Info);
            }
        }
    }
    public async Task Submit()
    {
        if (form is not null)
        {
            await form.Validate();
            if (form.IsValid)
            {
                model.AssignedRoles = _roles.Where(x => x.value).Select(x => x.key).ToArray();
                await OnFormSubmit.InvokeAsync(model);
            }
        }
    }
}
