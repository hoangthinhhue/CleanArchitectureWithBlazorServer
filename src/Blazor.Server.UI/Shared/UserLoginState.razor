@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Application.Common.Interfaces.MultiTenant;
@using CleanArchitecture.Blazor.Application.Features.Identity.Profile;
@using CleanArchitecture.Blazor.Domain.DTOs.Identity.Dto;
@using CleanArchitecture.Blazor.Infrastructure.Hubs
@using BlazorState
@using Mgr.Core.Extensions;

 
@implements IAsyncDisposable
@code{
    [CascadingParameter]
    protected Task<AuthenticationState> _authState { get; set; } = default!;
    [Inject]
    private NavigationManager _navigationManager { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider _authenticationStateProvider { get; set; } = default!;
    [Inject]
    private IIdentityService _identityService { get; set; }=default!;
    [Inject]
    private ITenantsService _tenantsService { get; set; } = null!;
    [Inject]
    private IMediator _mediator { get; set; } = default!;

    public async ValueTask DisposeAsync()
    {
        await _client.StopAsync();
        _client.Login -= _client_Login;
        _client.Logout -= _client_Logout;
        _authenticationStateProvider.AuthenticationStateChanged -= _authenticationStateProvider_AuthenticationStateChanged;
    }
    [Inject]
    private HubClient _client { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        var state = await _authState;
        await _tenantsService.Initialize().ConfigureAwait(false);
        if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
        {
            var userDto = await _identityService.GetUserDto(state.User.GetUserId()).ConfigureAwait(false);
            await setProfile(userDto).ConfigureAwait(false);
            _client.Login += _client_Login;
            _client.Logout += _client_Logout;
            await _client.StartAsync().ConfigureAwait(false);
            
        }
        _authenticationStateProvider.AuthenticationStateChanged += _authenticationStateProvider_AuthenticationStateChanged;
    }
    private void _authenticationStateProvider_AuthenticationStateChanged(Task<AuthenticationState> authenticationState)
    {
        InvokeAsync(async () =>
        {
            var state = await authenticationState;
            if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
            {
                var userDto = await _identityService.GetUserDto(state.User.GetUserId()).ConfigureAwait(false);
                await setProfile(userDto);
                await _client.StartAsync().ConfigureAwait(false);
                
            }
        });
    }
    private async Task setProfile(UserDto userDto)
    {
        await _mediator.Send(new UserProfileState.UpdateUserDtoAction(userDto));
    }
    private void _client_Login(object? sender, string e)
    {
        InvokeAsync(async () =>
        {
            
            var username = await _identityService.GetUserNameAsync(e).ConfigureAwait(false);
            Snackbar.Add($"{username} login.", MudBlazor.Severity.Info);
            
        });
    }

    private void _client_Logout(object? sender, string e)
    {
        InvokeAsync(async () =>
        {
    
            var username = await _identityService.GetUserNameAsync(e).ConfigureAwait(false);
            Snackbar.Add($"{username} logout.", MudBlazor.Severity.Normal);
            
        });
    }
}


