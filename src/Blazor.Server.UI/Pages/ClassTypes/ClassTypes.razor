 @page "/pages/classtype"

@using AutoMapper
@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.ClassTypes.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.ClassTypes.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.ClassTypes.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.ClassTypes.Commands.AddEdit
@using CleanArchitecture.Blazor.Domain.DTOs.ClassTypes.DTOs;
@using CleanArchitecture.Domain.Constants;

@inject IJSRuntime JS
@inject IStringLocalizer<ClassTypes> L
@attribute [Authorize(Policy = Permissions.ClassTypes.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<ClassTypeDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  @bind-RowsPerPage="_defaultPageSize"
                  Height="calc(100vh - 330px)"
                  Loading="@_loading"
                  LoadingProgressColor="Color.Info"
                  SortLabel="@ConstantString.ORDERBY"
                  MultiSelection="true"
                  @bind-SelectedItems="_selectedItems"
                  @bind-SelectedItem="_selectItem"
                  Hover="true" @ref="_table">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Class Type"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@ConstantString.REFRESH</MudButton>
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@ConstantString.CREATE</MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(_selectedItems.Count>0))"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@ConstantString.DELETE</MudButton>
                        }
                        @if (_canExport)
                        {
                            <MudLoadingButton @bind-Loading="_exporting" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                          Label="@ConstantString.EXPORT"
                                          StartIcon="@Icons.Custom.FileFormats.FileExcel"
                                          Size="Size.Small"
                                          Style="margin-right: 4px; margin-bottom:4px"
                                          OnClick="OnExport"
                                          IconColor="Color.Surface">
                                @ConstantString.EXPORT
                            </MudLoadingButton>
                            <MudLoadingButton @bind-Loading="_pdfexporting" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                          Label="@ConstantString.EXPORTPDF"
                                          StartIcon="@Icons.Material.Filled.PictureAsPdf"
                                          Size="Size.Small"
                                          Style="margin-right: 4px; margin-bottom:4px"
                                          OnClick="OnExportPDF"
                                          IconColor="Color.Surface">
                                @ConstantString.EXPORTPDF
                            </MudLoadingButton>
                        }
                        @if (_canImport)
                        {
                            <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="display:inline-block; margin-right: 4px; margin-bottom:4px;margin-top:0px">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label" Size="Size.Small"
                                           Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           Style="margin-right: 4px; margin-bottom:4px;padding-bottom: 8px;"
                                           StartIcon="@Icons.Material.Filled.Upload"
                                           for="@context">
                                        @if (_uploading)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2"> @ConstantString.UPLOADING</MudText>
                                        }
                                        else
                                        {
                                            <MudText Style="font-weight:inherit">@ConstantString.IMPORT.ToUpper()</MudText>
                                        }
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Material.Filled.KeyboardCommandKey" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@_loading" OnClick="@(()=>OnRefresh())">@ConstantString.REFRESH</MudMenuItem>
                            @if (_canCreate)
                            {
                                <MudMenuItem Disabled="@_loading" OnClick="OnCreate">@ConstantString.CREATE</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@ConstantString.DELETE</MudMenuItem>
                            }
                            @if (_canExport)
                            {
                                <MudMenuItem OnClick="OnExport">@ConstantString.EXPORT</MudMenuItem>
                            }
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@_searchString" Placeholder="@ConstantString.SEARCH" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <col style="width:48px;" />
                    <col style="width:150px;" />
                    <col style="width:200px;" />
                    <col style="width:500px;" />
                    <col style="width:auto;" />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh>@ConstantString.ACTIONS</MudTh>
                <MudTh><MudTableSortLabel SortLabel="Code" T="ClassTypeDto">@L["Code"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Name" T="ClassTypeDto">@L["Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Duration" T="ClassTypeDto">@L["Duration"]</MudTableSortLabel></MudTh>
                <MudTh>@L["Description"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ConstantString.ACTIONS">
                    @if (_canEdit || _canDelete)
                    {
                        <MudMenu Label="@ConstantString.ACTIONS" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@ConstantString.EDIT</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="@(()=>OnDelete(context))">@ConstantString.DELETE</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @ConstantString.NOALLOWED
                        </MudButton>
                    }
                </MudTd>
                <MudTd HideSmall="true" DataLabel="@L["Code"]">@context.Code</MudTd>
                <MudTd DataLabel="@L["Name"]">
                    <div class="d-flex flex-column">
                        <MudText>@context.Name</MudText>
                        <MudText Typo="Typo.body2">@context.Description</MudText>
                    </div>
                </MudTd>
                <MudTd DataLabel="@L["Duration"]" Style="text-align:left">@context.Duration?.ToString()</MudTd>
                <MudTd DataLabel="@L["Description"]">@context.Description</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@ConstantString.NOMACHING</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.LOADING</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10,15,30,50,100})" />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    public string? Title { get; private set; }
    private HashSet<ClassTypeDto> _selectedItems = new HashSet<ClassTypeDto>();
    private MudTable<ClassTypeDto> _table = default!;
    private ClassTypeDto _selectItem = new();
    private string _searchString = string.Empty;
    private bool _loading = true;
    private bool _uploading;
    private bool _exporting;
    private bool _pdfexporting;
    private int _defaultPageSize = 15;
    [Inject]
    private IMediator _mediator { get; set; } = default!;
    [Inject]
    private IMapper _mapper { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;

    private ClassTypesWithPaginationQuery _query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService _blazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Class Type"];
        var state = await _authState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.ClassTypes.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.ClassTypes.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.ClassTypes.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.ClassTypes.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.ClassTypes.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.ClassTypes.Export)).Succeeded;
    }
    private async Task<TableData<ClassTypeDto>> ServerReload(TableState state)
    {
        try
        {
            _loading = true;
            _query.AddFilter("Name", _searchString);
            if (state.SortDirection == SortDirection.None)
                state.SortDirection = SortDirection.Ascending;
            _query.PageIndex = state.Page + 1;
            _query.PageSize = state.PageSize;
            var result = await _mediator.Send(_query).ConfigureAwait(false);
            return new TableData<ClassTypeDto>() { TotalItems = result.TotalItems, Items = result.Data.AsEnumerable() };
        }
        finally
        {
            _loading = false;
        }

    }
    //private  async Task OnFilterChanged(string s)
    //{
    //      await _table.ReloadServerData();

    //}
    private void ConditionChanged(string s)
    {
        InvokeAsync(async () =>
        {
            await _table.ReloadServerData();
        });
    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        _searchString = text;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        _selectedItems = new();
        _searchString = string.Empty;
        await _table.ReloadServerData();
    }
    private async Task OnCreate()
    {
        var command = new AddEditClassTypeCommand();
        var parameters = new DialogParameters
            {
        { nameof(_ClassTypeFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_ClassTypeFormDialog>
        (string.Format(ConstantString.CREATEAITEM, L["ClassType"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.CREATESUCCESS}", MudBlazor.Severity.Info);
        }
    }
    private async Task OnEdit(ClassTypeDto dto)
    {
        var command = _mapper.Map<AddEditClassTypeCommand>(dto);
        var parameters = new DialogParameters
                {
                    { nameof(_ClassTypeFormDialog.model),command },
                };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_ClassTypeFormDialog>
        (string.Format(ConstantString.EDITTHEITEM, L["ClassType"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.SAVESUCCESS}", MudBlazor.Severity.Info);
        }

    }

    private async Task OnDelete(ClassTypeDto dto)
    {
        var parameters = new DialogParameters
                    {
                        { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DELETECONFIRMATION, dto.Name) }
                    };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(string.Format(ConstantString.EDITTHEITEM, L["ClassType"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            var command = new DeleteClassTypeCommand(new int[] { dto.Id });
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.DELETESUCCESS}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDeleteChecked()
    {
        var parameters = new DialogParameters
                        {
                    { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DELETECONFIRMWITHSELECTED,_selectedItems.Count) }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>
        (string.Format(ConstantString.DELETETHEITEM, L["ClassType"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            var command = new DeleteClassTypeCommand(_selectedItems.Select(x => x.Id).ToArray());
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.DELETESUCCESS}", MudBlazor.Severity.Info);
            _selectedItems = new HashSet<ClassTypeDto>();
        }
    }
    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportClassTypesQuery()
            {
                Keyword = _searchString,
                OrderBy = string.IsNullOrEmpty(_table.TableContext.SortFieldLabel) ? "Id" : _table.TableContext.SortFieldLabel,
                SortDirection = (_table.TableContext.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : _table.TableContext.SortDirection.ToString()),
            };
        var result = await _mediator.Send(request);
        var downloadresult = await _blazorDownloadFileService.DownloadFile($"{L["Class Type"]}.xlsx", result, contentType: "application/octet-stream");
        Snackbar.Add($"{ConstantString.EXPORTSUCESS}", MudBlazor.Severity.Info);
        _exporting = false;
    }
    private async Task OnExportPDF()
    {
        _pdfexporting = true;
        var request = new ExportClassTypesQuery()
            {
                Keyword = _searchString,
                OrderBy = string.IsNullOrEmpty(_table.TableContext.SortFieldLabel) ? "Id" : _table.TableContext.SortFieldLabel,
                SortDirection = (_table.TableContext.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : _table.TableContext.SortDirection.ToString()),
                exportType = ExportType.PDF
            };
        var result = await _mediator.Send(request);
        var downloadresult = await _blazorDownloadFileService.DownloadFile($"{L["Class Type"]}.pdf", result, contentType: "application/octet-stream");
        Snackbar.Add($"{ConstantString.EXPORTSUCESS}", MudBlazor.Severity.Info);
        _pdfexporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
            //TO-DOING
    }
}
