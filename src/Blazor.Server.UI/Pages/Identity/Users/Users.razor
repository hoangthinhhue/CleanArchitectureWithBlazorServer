@inherits OwningComponentBase
@implements IDisposable
@page "/identity/users"
@using Blazor.Server.UI.Components.Dialogs
@using Blazor.Server.UI.Pages.Identity.Roles;
@using BlazorDownloadFile;
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Application.Features.Identity.Profile;
@using CleanArchitecture.Blazor.Domain.Constants;
@using CleanArchitecture.Blazor.Infrastructure.Interfaces.MultiTenant;
@using CleanArchitecture.Core.Constants;
@using Duende.IdentityServer.Events
@using LazyCache;
@using Microsoft.AspNetCore.Components.Server.Circuits
@using Microsoft.AspNetCore.Identity;
@using CleanArchitecture.Blazor.Application.Features.Identity.Dto;
@using System.ComponentModel;
@using System.Reflection;
@using System.Security.Claims;
@using CleanArchitecture.Blazor.Application.Interfaces.MultiTenant;
@inject IStringLocalizer<Users> L
@attribute [Authorize(Policy = Permissions.Users.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudTable @ref="_table"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 265px)"
                  @bind-RowsPerPage="_defaultPageSize"
                  Hover="true"
                  MultiSelection="true"
                  @bind-SelectedItems="_selectItems"
                  SortLabel="@ConstantString.ORDERBY"
                  Loading="@_loading"
                  ServerData="@(new Func<TableState, Task<TableData<UserDto>>>(ServerReload))" >
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Users"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@ConstantString.REFRESH</MudButton>
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnCreate"
                                   IconColor="Color.Surface">@ConstantString.CREATE</MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(_selectItems.Count>0))"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@ConstantString.DELETE</MudButton>
                        }
                        @if (_canExport)
                        {
                            <MudLoadingButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                          StartIcon="@Icons.Material.Filled.Download"
                                          Size="Size.Small"
                                          @bind-Loading="_exporting" LoadingAdornment="Adornment.Start" OnClick="OnExport"
                                          Style="margin-right: 4px; margin-bottom:4px"
                                          IconColor="Color.Surface">@ConstantString.EXPORT</MudLoadingButton>
                        }
                        @if (_canImport)
                        {
                            <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="display:inline-block; margin-right: 4px; margin-bottom:4px;margin-top:0px">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label" Size="Size.Small"
                                           Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Upload"
                                           for="@context">
                                        @if (_uploading)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2"> @ConstantString.UPLOADING</MudText>
                                        }
                                        else
                                        {
                                            <MudText>@ConstantString.IMPORT</MudText>
                                        }
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Material.Filled.KeyboardCommandKey" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@_loading" OnClick="@(()=>OnRefresh())">@ConstantString.REFRESH</MudMenuItem>
                            @if (_canCreate)
                            {
                                <MudMenuItem OnClick="OnCreate">@ConstantString.CREATE</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@ConstantString.DELETE</MudMenuItem>
                            }
                            
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                @if (_canSearch)
                {
                    <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth="false"
                              Placeholder="@(L["Search for user name"])" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3">
                    </MudTextField>
                }
            </ToolBarContent>
            <ColGroup>
                 <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <col style="width:50px;" />
                <col style="width:120px;" />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh Style="width:80px">@ConstantString.ACTIONS</MudTh>
                <MudTh><MudTableSortLabel SortLabel="TenantId" T="UserDto">@L["Tenant Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="UserName" T="UserDto">@L["User Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Provider" T="UserDto">@L["Provider"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Email" T="UserDto">@L["Email"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="PhoneNumber" T="UserDto">@L["Phone Number"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="IsActive" T="UserDto">@L["Is Active"]</MudTableSortLabel></MudTh>
                <MudTh>@L["Lock Status"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ConstantString.ACTIONS">
                    @if (_canEdit || _canManageRoles || _canRestPassword || _canActive || _canManagePermissions)
                    {
                        <MudMenu Label="@ConstantString.ACTIONS" Variant="Variant.Filled" DisableElevation="true"
                             Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick=@(()=>OnEdit(context))>@ConstantString.EDIT</MudMenuItem>
                            }
                            @if (_canManagePermissions)
                            {
                                <MudMenuItem OnClick="@(()=>OnSetPermissions(context))">@L["Set Permissions"]</MudMenuItem>
                            }
                            @if (_canActive)
                            {
                                @if (context.IsActive)
                                {
                                    <MudMenuItem OnClick=@(()=>OnSetActive(context))>@L["Set Inactive"]</MudMenuItem>
                                }
                                else
                                {
                                    <MudMenuItem OnClick=@(()=>OnSetActive(context))>@L["Set Active"]</MudMenuItem>
                                }

                            }
                            @if (_canRestPassword)
                            {
                                <MudMenuItem OnClick=@(()=>OnResetPassword(context))>@L["Rest Password"]</MudMenuItem>
                            }

                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @ConstantString.NOALLOWED
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="@L["Tenant Name"]">
                    <div class="d-flex flex-column">
                    <MudText>@context.TenantName</MudText>
                    <MudText Typo="Typo.body2">@context.TenantId</MudText>
                    </div>
                </MudTd>
                <MudTd DataLabel="@L["User Name"]">
                    <div class="d-flex align-content-center flex-wrap">
                        <MudBadge Color="@(isOnline(context.UserName)? Color.Success :Color.Error)" Overlap="false" Dot="true" Bordered="true">
                            <MudAvatar Image="@context.ProfilePictureDataUrl" Alt="@context.UserName">@context?.UserName?.First()</MudAvatar>
                        </MudBadge>
                        <div class="d-flex flex-column">
                            <MudText Class="ml-2 align-self-center">@context.UserName</MudText>
                            <MudText Typo="Typo.body2" Class="ml-2 align-self-center">@context.DisplayName</MudText>
                        </div>
                    </div>
                </MudTd>
                <MudTd DataLabel="@L["Provider"]">@context.Provider</MudTd>
                <MudTd DataLabel="@L["Email"]">@context.Email</MudTd>
                <MudTd HideSmall="true" DataLabel="@L["Phone Number"]">@context.PhoneNumber</MudTd>
                <MudTd HideSmall="true" DataLabel="@L["Is Active"]">
                    <MudCheckBox Checked="@context.IsActive" ReadOnly Color="Color.Secondary"></MudCheckBox>
                </MudTd>
                <MudTd HideSmall="true" DataLabel="@L["Lock Status"]">@context.LockoutEnd</MudTd>
            </RowTemplate>
            <PagerContent>
                 <MudTablePager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudTable>

        <_PermissionsDrawer OnAssignAllChanged="OnAssignAllChangedHandler" Waiting="@_processing" OnOpenChanged="OnOpenChangedHandler" Open="_showPermissionsDrawer" Permissions="_permissions" OnAssignChanged="OnAssignChangedHandler"></_PermissionsDrawer>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code {
    [Inject]
    private IUsersStateContainer _usersStateContainer { get; set; } = default!;
    private int _defaultPageSize = 15;
    private HashSet<UserDto> _selectItems = new();
    private string _searchString = string.Empty;
    private string Title { get; set; } = "Users";
    private List<PermissionModel> _permissions = new();
    private IList<Claim> _assignedClaims = default!;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;
    private UserManager<ApplicationUser> _userManager { get; set; } = default!;
    private TimeSpan refreshInterval => TimeSpan.FromSeconds(60);
    private LazyCacheEntryOptions _options => new LazyCacheEntryOptions().SetAbsoluteExpiration(refreshInterval, ExpirationMode.LazyExpiration);
    [Inject]
    private IAppCache _cache { get; set; } = null!;
    [Inject]
    private ITenantProvider _tenantProvider{ get; set; }= default!;
    [Inject]
    private ITenantsService _tenantsService { get; set; } = null!;
    [Inject]
    private IBlazorDownloadFileService _blazorDownloadFileService { get; set; } = null!;
    [Inject]
    private IExcelService _excelService { get; set; } = null!;
    [Inject]
    private IMediator _mediator { get; set; } = default!;
    private MudTable<UserDto> _table = null!;
    private bool _processing;
    private bool _showPermissionsDrawer;
    private bool _canCreate;
    private bool _canSearch;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canActive;
    private bool _canManageRoles;
    private bool _canRestPassword;
    private bool _canManagePermissions;
    private bool _canImport;
    private bool _canExport;
    private bool _loading;
    private bool _exporting;
    private bool _uploading;



    protected override async Task OnInitializedAsync()
    {

        _userManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();

        Title = L["Users"];
        var state = await _authState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Delete)).Succeeded;
        _canActive = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Active)).Succeeded;
        _canManageRoles = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.ManageRoles)).Succeeded;
        _canRestPassword = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.RestPassword)).Succeeded;
        _canManagePermissions = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.ManagePermissions)).Succeeded;
        _canImport =  (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Import)).Succeeded;
        _canExport =  (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Export)).Succeeded;
        _usersStateContainer.OnChange += HandleCircuitsChanged;


    }
    public void Dispose()
    {
        _usersStateContainer.OnChange -= HandleCircuitsChanged;
    }
    private bool isOnline(string username)
    {
        return _usersStateContainer.UsersByConnectionId.Any(x => x.Value.Equals(username, StringComparison.OrdinalIgnoreCase));
    }
    private void HandleCircuitsChanged()
    {
        InvokeAsync(() =>
        {
            foreach (var session in _usersStateContainer.UsersByConnectionId)
            {
                Snackbar.Add(string.Format(
                       L["{0} online at moment."], session.Value), MudBlazor.Severity.Info);
            }

        });
    }

    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        try
        {
            _loading = true;
            var items = await _userManager.Users
                 .Include(x => x.UserRoles).ThenInclude(x => x.Role).Where(x => x.UserName.Contains(_searchString) || x.Email.Contains(_searchString) || x.DisplayName.Contains(_searchString) || x.PhoneNumber.Contains(_searchString))
                 .OrderBy($"{state.SortLabel ?? "UserName"} {(state.SortDirection == SortDirection.None ? SortDirection.Descending.ToString():state.SortDirection.ToString())}")
                 .Skip(state.Page * state.PageSize).Take(state.PageSize).Select(x => new UserDto()
                     {
                         Checked = false,
                         ProfilePictureDataUrl = x.ProfilePictureDataUrl,
                         DisplayName = x.DisplayName,
                         Email = x.Email!,
                         IsActive = x.IsActive,
                         IsLive = x.IsLive,
                         PhoneNumber = x.PhoneNumber,
                         Provider = x.Provider,
                         Id = x.Id,
                         UserName = x.UserName!,
                         TenantId = x.TenantId,
                         TenantName = x.TenantName,
                         LockoutEnd = x.LockoutEnd,
                         Role = x.UserRoles.Select(x => x.Role.Name).FirstOrDefault(),
                         AssignRoles = x.UserRoles.Select(x => x.Role.Name!).ToArray(),
                     }).ToListAsync();
            var total = await _userManager.Users.CountAsync(x => x.UserName.Contains(_searchString) || x.Email.Contains(_searchString) || x.DisplayName.Contains(_searchString) || x.PhoneNumber.Contains(_searchString));
            return new TableData<UserDto>() { TotalItems = total, Items = items };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnRefresh()
    {
        await  _table.ReloadServerData();
    }
    private async Task OnCreate()
    {
        var model = new UserDto() { Provider = "Local", Email="",UserName="", AssignRoles = new string[] { RoleNameConstants.Basic } };
        var parameters = new DialogParameters {
            { nameof(_UserFormDialog.model),model }
           };
        var options = new DialogOptions {CloseButton=true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<_UserFormDialog>(L["Create a new user"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var applicationUser = new ApplicationUser()
                {
                    Provider = model.Provider,
                    DisplayName = model.DisplayName,
                    UserName = model.UserName,
                    TenantId = model.TenantId,
                    TenantName = model.TenantName,
                    Email = model.Email,
                    PhoneNumber = model.PhoneNumber,
                    ProfilePictureDataUrl = model.ProfilePictureDataUrl,
                    IsActive = model.IsActive,
                };
            var password = model.Password;
            var state = await _userManager.CreateAsync(applicationUser, password!);

            if (state.Succeeded)
            {
                if (model.AssignRoles is not null && model.AssignRoles.Length > 0)
                {
                    await _userManager.AddToRolesAsync(applicationUser, model.AssignRoles);
                }
                else
                {
                    await _userManager.AddToRoleAsync(applicationUser, RoleNameConstants.Basic);
                }
                Snackbar.Add($"{ConstantString.CREATESUCCESS}", MudBlazor.Severity.Info);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }

    private async Task OnEdit(UserDto item)
    {

        var parameters = new DialogParameters {
                   { nameof(_UserFormDialog.model),item }
            };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<_UserFormDialog>(L["Edit the user"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var user = await _userManager.FindByIdAsync(item.Id!) ?? throw new NotFoundException($"The application user [{item.Id}] was not found.");
            var state = await _authState;
            user.Email = item.Email;
            user.PhoneNumber = item.PhoneNumber;
            user.ProfilePictureDataUrl = item.ProfilePictureDataUrl;
            user.DisplayName = item.DisplayName;
            user.Provider = item.Provider;
            user.UserName = item.UserName;
            user.IsActive = item.IsActive;
            user.TenantId = item.TenantId;
            user.TenantName = item.TenantName;
            var identityResult = await _userManager.UpdateAsync(user);
            if (identityResult.Succeeded)
            {
                var roles = await _userManager.GetRolesAsync(user!);
                if (roles.Count > 0)
                {
                    var removeRoleResult = await _userManager.RemoveFromRolesAsync(user, roles);
                    if (removeRoleResult.Succeeded)
                    {
                        if (item.AssignRoles is not null && item.AssignRoles.Length > 0)
                        {
                            await _userManager.AddToRolesAsync(user, item.AssignRoles);
                        }
                    }
                }

                if (state.User.GetUserId() == item.Id)
                {
                    //update user profile
                    await _mediator.Send(new UserProfileState.UpdateUserDtoAction(item));
                }
                Snackbar.Add($"{ConstantString.UPDATESUCCESS}", MudBlazor.Severity.Info);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (identityResult.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }

    private async Task OnDeleteChecked()
    {
        var state = await _authState;
        var currentUserId = state.User.GetUserId();
        var isSelectedItemContainCurrentUser = _selectItems.Any(x => x.Id == currentUserId);

        if (isSelectedItemContainCurrentUser)
        {
            if (_selectItems.Count == 1)
            {
                Snackbar.Add($"{ConstantString.DELETEFAIL}", MudBlazor.Severity.Error);
                return;
            }

            _selectItems.Remove(_selectItems.First(x=>x.Id == currentUserId));
        }

        string deleteContent = ConstantString.DELETECONFIRMATION;
        var parameters = new DialogParameters { { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, _selectItems.Count) } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var deleteId = _selectItems.Select(x => x.Id).ToArray();
            var deleteUsers = await _userManager.Users.Where(x => deleteId.Contains(x.Id) ).ToListAsync();

            foreach (var deleteUser in deleteUsers)
            {
                var deleteresult= await _userManager.DeleteAsync(deleteUser);
                if (!deleteresult.Succeeded)
                {
                    Snackbar.Add($"{string.Join(",", (deleteresult.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
                    return;
                }
            }
            Snackbar.Add($"{ConstantString.DELETESUCCESS}", MudBlazor.Severity.Info);
            await OnRefresh();
        }

    }

    private async Task OnSetActive(UserDto item)
    {
        var user = await _userManager.FindByIdAsync(item.Id!) ?? throw new NotFoundException($"Application user not found {item.Id}.");
        user.IsActive = !item.IsActive;
        var state = await _userManager.UpdateAsync(user);
        item.IsActive = !item.IsActive;
        if (state.Succeeded)
        {
            Snackbar.Add($"{ConstantString.UPDATESUCCESS}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
        }
    }

    private async Task OnResetPassword(UserDto item)
    {

        var model = new ResetPasswordFormModel()
            { Id = item.Id, DisplayName = item.DisplayName, UserName = item.UserName, ProfilePictureDataUrl = item.ProfilePictureDataUrl };
        var parameters = new DialogParameters { ["model"] = model };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<_ResetPasswordDialog>(L["Set Password"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {

            var user = await _userManager.FindByIdAsync(item.Id!);
            var token = await _userManager.GeneratePasswordResetTokenAsync(user!);
            var state = await _userManager.ResetPasswordAsync(user!, token, model!.Password!);
            if (state.Succeeded)
            {
                Snackbar.Add($"{L["Reset password successfully"]}", MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }
    private async Task OnSetPermissions(UserDto item)
    {
        _showPermissionsDrawer = true;
        _permissions = new();
        _permissions = await GetAllPermissions(item);


    }
    private Task OnOpenChangedHandler(bool state)
    {
        _showPermissionsDrawer = state;
        return Task.CompletedTask;
    }
    private async Task<List<PermissionModel>> GetAllPermissions(UserDto dto)
    {
        Func<string, Task<IList<Claim>>> getcalims = async (userId) =>
        {
            var user = await _userManager.FindByIdAsync(dto.Id) ?? throw new NotFoundException($"not found application user: {userId}");
            var claims = await _userManager.GetClaimsAsync(user);
            return claims;
        };
        var key = $"get-claims-by-{dto.Id}";
        _assignedClaims = await _cache.GetOrAddAsync(key, async () => await getcalims(dto.Id), _options);
        var allPermissions = new List<PermissionModel>();
        var modules = typeof(Permissions).GetNestedTypes();
        foreach (var module in modules)
        {
            var moduleName = string.Empty;
            var moduleDescription = string.Empty;
            if (module.GetCustomAttributes(typeof(DisplayNameAttribute), true)
                .FirstOrDefault() is DisplayNameAttribute displayNameAttribute)
                moduleName = displayNameAttribute.DisplayName;

            if (module.GetCustomAttributes(typeof(DescriptionAttribute), true)
                .FirstOrDefault() is DescriptionAttribute descriptionAttribute)
                moduleDescription = descriptionAttribute.Description;

            var fields = module.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);
            foreach (var fi in fields)
            {
                var propertyValue = fi.GetValue(null);

                if (propertyValue is not null)
                {
                    var claimValue = propertyValue.ToString();
                    allPermissions.Add(
                        new PermissionModel
                            {
                                UserId = dto.Id,
                                ClaimValue = claimValue,
                                ClaimType = ApplicationClaimTypes.Permission,
                                Group = moduleName,
                                Description = moduleDescription,
                                Assigned = _assignedClaims.Any(x => x.Value == claimValue)
                            });
                }
            }
        }
        return allPermissions;
    }
    private async Task OnAssignAllChangedHandler(List<PermissionModel> models)
    {
        try
        {
            _processing = true;
            var userId = models.First().UserId;
            var user = await _userManager.FindByIdAsync(userId!)?? throw new NotFoundException($"not found application user: {userId}");
            foreach (var model in models)
            {
                if (model.Assigned)
                {
                    if (model.ClaimType is not null && model.ClaimValue is not null)
                    {
                        await _userManager.AddClaimAsync(user, new Claim(model.ClaimType, model.ClaimValue));
                    }
                }
                else
                {
                    var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                    if (removed is not null)
                    {
                        await _userManager.RemoveClaimAsync(user, removed);
                    }
                }
            }

            Snackbar.Add($"{L["Authorization has been changed"]}", MudBlazor.Severity.Info);
            await Task.Delay(300);
            var key = $"get-claims-by-{user.Id}";
            _cache.Remove(key);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task OnAssignChangedHandler(PermissionModel model)
    {
        try
        {
            _processing = true;
            var userId = model.UserId!;
            var user = await _userManager.FindByIdAsync(userId) ?? throw new NotFoundException($"Application user Not Found {userId}."); ;
            model.Assigned = !model.Assigned;
            if (model.Assigned && model.ClaimType is not null && model.ClaimValue is not null)
            {
                await _userManager.AddClaimAsync(user, new Claim(model.ClaimType, model.ClaimValue));
                Snackbar.Add($"{L["Authorization successful"]}", MudBlazor.Severity.Info);
            }
            else
            {
                var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                if (removed is not null)
                {
                    await _userManager.RemoveClaimAsync(user, removed);
                }
                Snackbar.Add($"{L["Authorization canceled successfully"]}", MudBlazor.Severity.Info);
            }
            var key = $"get-claims-by-{user.Id}";
            _cache.Remove(key);

        }
        finally
        {
            _processing = false;
        }

    }
    private async Task OnExport()
    {
        _exporting = true;
        var items = await _userManager.Users
                 .Where(x => x.UserName.Contains(_searchString) || x.Email.Contains(_searchString) || x.DisplayName.Contains(_searchString) || x.PhoneNumber.Contains(_searchString) )
                 .Select(x => new UserDto()
                     {
                         Id = x.Id,
                         UserName = x.UserName!,
                         DisplayName = x.DisplayName,
                         Email = x.Email!,
                         PhoneNumber = x.PhoneNumber,
                         TenantName = x.TenantName,
                     }).ToListAsync();
        var result = await _excelService.ExportAsync(items,
                new Dictionary<string, Func<UserDto, object?>>()
                            {
                      {L["Id"],item => item.Id},
                      {L["User Name"],item => item.UserName},
                      {L["Display Name"],item => item.DisplayName},
                      {L["Email"],item => item.Email},
                      {L["Phone Number"],item => item.PhoneNumber},
                      {L["Tenant Name"],item => item.TenantName},
                            }
                , L["Users"]);
        var downloadresult = await _blazorDownloadFileService.DownloadFile($"{L["Users"]}.xlsx", result, contentType: "application/octet-stream");
        Snackbar.Add($"{ConstantString.EXPORTSUCESS}", MudBlazor.Severity.Info);
        _exporting = false;
    }

    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var result = await _excelService.ImportAsync(stream.ToArray(), mappers: new Dictionary<string, Func<DataRow, ApplicationUser, object?>>
            {
                { L["User Name"], (row, item) => item.UserName = row[L["User Name"]]?.ToString() },
                { L["Display Name"], (row, item) => item.DisplayName = row[L["Display Name"]]?.ToString() },
                { L["Email"], (row, item) => item.Email = row[L["Email"]]?.ToString() },
                { L["Phone Number"], (row, item) => item.PhoneNumber = row[L["Phone Number"]]?.ToString() },
                { L["Tenant Name"], (row, item) => item.TenantName = row[L["Tenant Name"]]?.ToString() },
            }, L["Users"]);
        if (result.Succeeded)
        {
            foreach (var user in result.Data)
            {
                if (!_userManager.Users.Any(x =>  x.UserName == user.UserName || x.Email == user.Email))
                {
                    var tenantId = _tenantsService.DataSource.Any(x => x.Name == user.TenantName) ? _tenantsService.DataSource.First(x => x.Name == user.TenantName).Id : _tenantsService.DataSource.First().Id;
                    user.TenantId = tenantId;
                    var iresult = await _userManager.CreateAsync(user);
                    if (iresult.Succeeded)
                    {
                        await _userManager.AddToRolesAsync(user, new string[] { RoleNameConstants.Basic });
                    }
                    else
                    {
                        Snackbar.Add($"{string.Join(',',iresult.Errors.Select(x=>x.Description))}", MudBlazor.Severity.Error);
                    }
                }
            }

            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.IMPORTSUCCESS}", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (var msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }
        _uploading = false;
    }
}
